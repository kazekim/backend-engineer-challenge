// Code generated by mockery v2.14.0. DO NOT EDIT.

package grscankafkamocks

import (
	bekafka "github.com/kazekim/backend-engineer-challenge/grlib/bekafka"
	grerrors "github.com/kazekim/backend-engineer-challenge/grlib/grerrors"

	grscankafka "github.com/kazekim/backend-engineer-challenge/grlib/grscankafka"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// PublishStartGitRepositoryScanningMessage provides a mock function with given fields: serverId, data
func (_m *Client) PublishStartGitRepositoryScanningMessage(serverId string, data grscankafka.PublishStartGitRepositoryScanningMessageParams) grerrors.Error {
	ret := _m.Called(serverId, data)

	var r0 grerrors.Error
	if rf, ok := ret.Get(0).(func(string, grscankafka.PublishStartGitRepositoryScanningMessageParams) grerrors.Error); ok {
		r0 = rf(serverId, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grerrors.Error)
		}
	}

	return r0
}

// StartSendCampaignWorker provides a mock function with given fields: action
func (_m *Client) StartSendCampaignWorker(action func(string, grscankafka.PublishStartGitRepositoryScanningMessageParams) bekafka.WorkerStatus) grerrors.Error {
	ret := _m.Called(action)

	var r0 grerrors.Error
	if rf, ok := ret.Get(0).(func(func(string, grscankafka.PublishStartGitRepositoryScanningMessageParams) bekafka.WorkerStatus) grerrors.Error); ok {
		r0 = rf(action)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grerrors.Error)
		}
	}

	return r0
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
